import numpy as np
import pytest
from tsdr import tsdr

cases_for_stationality = [
    {
        'name': 's-front-end_latency',
        'desc': 'clear anomaly range',
        'is_unstationality': True,
        'datapoints': [
            0.0139, 0.0134, 0.0131, 0.0129, 0.0127, 0.0128, 0.012 , 0.0119,
            0.0115, 0.0127, 0.0134, 0.013 , 0.012 , 0.0122, 0.0123, 0.0123,
            0.0115, 0.0118, 0.0125, 0.0172, 0.0228, 0.0214, 0.0168, 0.0127,
            0.0129, 0.0134, 0.0144, 0.0139, 0.013 , 0.012 , 0.0134, 0.0149,
            0.0144, 0.015 , 0.0163, 0.0168, 0.0162, 0.0155, 0.0155, 0.0142,
            0.0136, 0.0123, 0.0122, 0.0116, 0.0116, 0.0115, 0.0116, 0.012 ,
            0.013 , 0.0132, 0.0144, 0.0144, 0.0168, 0.0159, 0.0153, 0.013 ,
            0.0125, 0.0126, 0.0135, 0.0144, 0.0139, 0.0127, 0.0123, 0.0118,
            0.0115, 0.0114, 0.0118, 0.0126, 0.0133, 0.014 , 0.014 , 0.0132,
            0.0131, 0.0138, 0.0142, 0.0139, 0.0133, 0.0129, 0.0139, 0.0138,
            0.0141, 0.0133, 0.0126, 0.0119, 0.0113, 0.0126, 0.0133, 0.0138,
            0.0123, 0.0121, 0.012 , 0.0121, 0.0136, 0.0137, 0.0138, 0.0129,
            0.0126, 0.0123, 0.0133, 0.0144, 0.0172, 0.0157, 0.0154, 0.0186,
            0.0271, 0.0334, 0.038 , 0.0374, 0.0362, 0.0366, 0.036 , 0.0355,
            0.0365, 0.0405, 0.0433, 0.0418, 0.0395, 0.039 , 0.0389, 0.0384
        ],
    }, {
        'name': 'c-catalogue_last_seen',
        'desc': 'straight line with upper trend',
        'is_unstationality': False,
        'datapoints': [
            1.63903003e+09, 1.63903004e+09, 1.63903006e+09, 1.63903008e+09,
            1.63903009e+09, 1.63903010e+09, 1.63903012e+09, 1.63903014e+09,
            1.63903015e+09, 1.63903016e+09, 1.63903018e+09, 1.63903020e+09,
            1.63903021e+09, 1.63903022e+09, 1.63903024e+09, 1.63903026e+09,
            1.63903027e+09, 1.63903028e+09, 1.63903030e+09, 1.63903032e+09,
            1.63903033e+09, 1.63903034e+09, 1.63903036e+09, 1.63903038e+09,
            1.63903039e+09, 1.63903040e+09, 1.63903042e+09, 1.63903044e+09,
            1.63903045e+09, 1.63903046e+09, 1.63903048e+09, 1.63903050e+09,
            1.63903051e+09, 1.63903052e+09, 1.63903054e+09, 1.63903056e+09,
            1.63903057e+09, 1.63903058e+09, 1.63903060e+09, 1.63903062e+09,
            1.63903063e+09, 1.63903064e+09, 1.63903066e+09, 1.63903068e+09,
            1.63903069e+09, 1.63903070e+09, 1.63903072e+09, 1.63903074e+09,
            1.63903075e+09, 1.63903076e+09, 1.63903078e+09, 1.63903080e+09,
            1.63903081e+09, 1.63903082e+09, 1.63903084e+09, 1.63903086e+09,
            1.63903087e+09, 1.63903088e+09, 1.63903090e+09, 1.63903092e+09,
            1.63903093e+09, 1.63903094e+09, 1.63903096e+09, 1.63903098e+09,
            1.63903099e+09, 1.63903100e+09, 1.63903102e+09, 1.63903104e+09,
            1.63903105e+09, 1.63903106e+09, 1.63903108e+09, 1.63903110e+09,
            1.63903111e+09, 1.63903112e+09, 1.63903114e+09, 1.63903116e+09,
            1.63903117e+09, 1.63903118e+09, 1.63903120e+09, 1.63903122e+09,
            1.63903123e+09, 1.63903124e+09, 1.63903126e+09, 1.63903128e+09,
            1.63903129e+09, 1.63903130e+09, 1.63903132e+09, 1.63903134e+09,
            1.63903135e+09, 1.63903136e+09, 1.63903138e+09, 1.63903140e+09,
            1.63903141e+09, 1.63903142e+09, 1.63903144e+09, 1.63903146e+09,
            1.63903147e+09, 1.63903148e+09, 1.63903150e+09, 1.63903152e+09,
            1.63903153e+09, 1.63903154e+09, 1.63903156e+09, 1.63903158e+09,
            1.63903159e+09, 1.63903160e+09, 1.63903162e+09, 1.63903164e+09,
            1.63903165e+09, 1.63903166e+09, 1.63903168e+09, 1.63903170e+09,
            1.63903171e+09, 1.63903172e+09, 1.63903174e+09, 1.63903176e+09,
            1.63903177e+09, 1.63903178e+09, 1.63903180e+09, 1.63903182e+09,
        ]
    },
]

@pytest.mark.parametrize("case", cases_for_stationality)
@pytest.mark.parametrize("alpha", [0.01])
@pytest.mark.parametrize("cv_threshold", [0.1, 0.5])
@pytest.mark.parametrize("regression", ['c', 'ct'])
def test_is_unstational_series(case, alpha, cv_threshold, regression):
    got = tsdr.is_unstational_series(np.array(case['datapoints']), alpha, cv_threshold, regression)
    assert got == case['is_unstationality'], f"{case['name']}: {case['desc']}"
